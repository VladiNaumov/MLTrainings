# Простая линейная регрессия со scikit-learn

import numpy as np
from sklearn.linear_model import LinearRegression

""" Вторым шагом определите данные, с которыми предстоит работать. 
Входы (регрессоры, x) и выход (предиктор, y) должны быть массивами (экземпляры класса numpy.ndarray) или похожими объектами. 
Вот простейший способ предоставления данных регрессии:

"""
# Шаг 2 : Предоставьте данные

x = np.array([5, 15, 25, 35, 45, 55]).reshape((-1, 1))
y = np.array([5, 20, 14, 32, 22, 38])

""" 
Теперь у вас два массива: вход x и выход y. Вам нужно вызвать .reshape()на x, 
потому что этот массив должен быть двумерным или более точным – иметь одну колонку и необходимое количество рядов. 
Это как раз то, что определяет аргумент (-1, 1).
"""

# Шаг 3: Создайте модель

""" На этом шаге создайте и приспособьте модель линейной регрессии к существующим данным.

Давайте сделаем экземпляр класса LinearRegression, который представит модель регрессии:

"""

model = LinearRegression()

model.fit(x, y)

""" С помощью .fit() вычисляются оптимальные значение весов b₀ и b₁, используя существующие вход и выход (x и y) в качестве аргументов. 
Другими словами, .fit() совмещает модель. Она возвращает self - переменную model. Поэтому можно заменить две последние операции на: """

model = LinearRegression().fit(x, y)

# Шаг 4: Получите результаты

""" Вы можете получить определения (R²) с помощью .score(), вызванной на model: 
.score() принимает в качестве аргументов предсказатель x и регрессор y, и возвращает значение R².
"""

r_sq = model.score(x, y)
print('coefficient of determination:', r_sq)


""" 
model содержит атрибуты .intercept_, который представляет собой коэффициент, и b0 с .coef_, которые представляют b1:
"""
print('intercept:', model.intercept_)
print('slope:', model.coef_)

""" 
Код выше показывает, как получить b₀ и b₁. Заметьте, что .intercept_ – это скаляр, в то время как .coef_ – массив.

Примерное значение b₀ = 5.63 показывает, что ваша модель предсказывает ответ 5.63 при x, равном нулю. Равенство b₁ = 0.54 означает, что предсказанный ответ возрастает до 0.54 при x, увеличенным на единицу.
"""

"""
Заметьте, что вы можете предоставить y как двумерный массив. Тогда результаты не будут отличаться:
"""

new_model = LinearRegression().fit(x, y.reshape((-1, 1)))
print('intercept:', new_model.intercept_)

print('slope:', new_model.coef_)

# Шаг 5: Предскажите ответ

"""
Когда вас устроит ваша модель, вы можете использовать её для прогнозов с текущими или другими данными.

Получите предсказанный ответ, используя .predict():

"""

y_pred = model.predict(x)
print('predicted response:', y_pred, sep='\n')

"""
Применяя .predict(), вы передаёте регрессор в качестве аргумента и получаете соответствующий предсказанный ответ.
"""


